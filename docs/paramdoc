Parameters read by Splotch
==========================

infile (string):
  name of the input file containing particle data
  (in case of parallel reading and/or interpolation this is only a partial name)

simtype (integer):
  type of the data reader to be used

    0: tabular binary file
    1: block binary file
    2: Gadget2
    3: Enzo
    4: Gadget Millenium
    5: plain binary file MPI2
    6: Mesh
    7: HDF5

if (simtype==2 or simtype==4) (i.e. only for Gadget files)

  interpolation_mode (integer, default=0):
    Only relevant for animations
    0: no interpolation between files
    1: linear interpolation
    2: higher order interpolation

  ptypes (integer):
    number of different particle types (default: 1)

  numfiles (integer, default=1):
    number of files containing one data set

  readparallel (integer, default=1):
    number of tasks reading the input data set

  if (interpolation_mode>0)

    id_label (string):
      label for the block containing the particle IDs

  endif

  ptype<n> =                 ## integer defining particle type <n>
  size_fix<n> =              ## float to define particle size
  if (size_fix<n> == 0)
     size_label<n> = HSML    ## label for block that contains particle size
     size_present<n> =       ## bit-coded 2^ptype for which types this block contains data
  endif
  size_fac<n> = 0.5          ## factor to multiply size with

  color_is_vector = TRUR/FALSE  ## indicates if color is a vector or a scalar quantity
  color_label<n> = U            ## label for block that contains particle color
  color_present<n> = 1          ## bit-coded 2^ptype for which types this block contains data
  color_fac<n> = 1e5            ## factor to multiply color with

  intensity_label<n> = XXXX  ## label for block that contains particle intensity
  intensity_present<n> = 1   ## bit-coded 2^ptype for which types this block contains data

endif

swap_endian (bool, defaul=false):
  if true, the input data are swapped directly after reading


if (simtype==0,1,5) (i.e. only for binary files)

  num_columns (integer):
    number of columns (case simtype = 0, i.e. tabular)
  num_blocks (integer):
    number of blocks  (case simtype = 0/5, i.e. blocks)

## number of column/block containing the following particle property:
## (-1 means that this property is missing in the input file or it is not to be read)
    x (integer): index of the x-coordinate
    y (integer): index of the y-coordinate
    z (integer): index of the z-coordinate
    r (integer): index of the smoothing length
    I (integer): index of the intensity
## if color_is_vector, the following properties correspond to RGB color of the particle
    C1 (integer): index of the R component
    C2 (integer): index of the G component
    C3 (integer): index of the B component
##else
    C1 (integer): index of the quantity to use in a color lookup table

endif


##------------------
## Geometrical setup
##------------------
minhsmlpixel =     ## increases small HSML values to at least pixel size: true/false (default: false)
projection =       ## enables perspective projection: true/false (default: true)

geometry_file (string, default=""):
  name of the geometry file, if any

if (geometry_file!="")

  geometry_start (integer, default=0):
    first line in the geometry file that should be used

  geometry_incr (integer, default=1):
    distance of two consecutive lines to be used

else

  camera_{xyz} (double):
    X/Y/Z-coordinate of the camera

  lookat_{xyz} (double):
    X/Y/Z-coordinate of the look-at point

  sky_{xyz} (double):
    X/Y/Z-coordinate of the sky vector

endif

fov (double, default=45):
  field of view in degrees

## define z-coordinate range of particles to be visualized
zmin (double, default=0):
  near cutoff distance
zmax (double, default=1e23):
  far cutoff distance


##-------------------------
## Visualization properties
##-------------------------
a_eq_e =       ## condition A = E in the radiative transfer equation: true/false (default: true)
sort_type =    ## 0: nosort, 1: by z, 2: by value, 3: by reversed value, 4: by size

## visualization properties for particles of type <n> :
color_log<n>=       ## apply logarithmic function to the physical quantities
                       associated to the colors: true/false (default: true)
color_asinh<n>=     ## apply hyperbolic arcsin function to the physical quantities
                       associated to the colors: true/false (default: false)
color_min<n>=       ## color range
color_max<n>=
intensity_log<n>=        ## apply logarithmic function to the intensity value: true/false (default: true)
intensity_min<n>=        ## intensity range
intensity_max<n>=
brightness<n>=           ## multiplicative factor of the intensity  (default: 1.)
gray_absorption<n>=      ## ????? (default: 0.2)
palette<n> =             ## name of the file containing the colormap
                         ## only used for particles of ptype=n which are vectors, otherwhise
                         ## color is given in C1,C2,C3 fields

##---------------
## Output Options
##---------------
pictype =        ## format output image: 0 = tga  (default: 0)
outfile =        ## output file name
colorbar=        ## add colorbar: true/false
resolution =     ## image resolution, i.e. number of pixels defining image dimension (default: 200)

## define y-coordinate range of pixels to visualize
ycut0 =          ## default: 0
ycut1 =          ## default: resolution


##-----------
## CUDA SETUP
##-----------
max_region =     ## the maximun pixels used to visualize a particle (default: 1024), if the particle
                    occupies a larger region then split (split strategy optimization for access
                    of the device memory)
gpu_info =       ## enable print detailed information about gpus available: true/flase (default: false)

gpu_number =     ## number of GPUs to use only on Windows  (default: 1)

use_host_as_thread =   ## enable host (cpu) as a cuda thread: true/false (default: false)
host_load =            ## percentage of load for host (default 0) if it is enabled as a thread

test_load_balancing =  ## enable gpu load balancing: true/false
                          (default: false, i.e. all gpus manage the same number of particles)
gpu_load<g> =          ## if test_load_balancing is true, this parameter gives the percentage
                          of particles to manage for the gpu number <g>  (default: 0)
